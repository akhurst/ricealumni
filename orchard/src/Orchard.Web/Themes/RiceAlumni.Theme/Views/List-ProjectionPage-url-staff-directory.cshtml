@using System.Linq;
@using System.Collections.Generic;

@functions {
	private void AddProfileToGroupList(dynamic newProfile, List<dynamic> staffGroupProfiles)
	{
		var index = 0;
		foreach (var existingProfile in staffGroupProfiles)
		{
			if (existingProfile.ContentItem.ContainablePart.Weight > newProfile.ContentItem.ContainablePart.Weight)
			{
				index++;
			}
			else if (existingProfile.ContentItem.ContainablePart.Weight == newProfile.ContentItem.ContainablePart.Weight)
			{
				if (newProfile.ContentItem.TitlePart.Title.CompareTo(existingProfile.ContentItem.TitlePart.Title)<0)
				{
					break;
				}
				else
				{
					index++;
				}
			}
			else // must be lesser weight, insert before this one
			{
				break;
			}
		}

		if (index >= staffGroupProfiles.Count)
		{
			staffGroupProfiles.Add(newProfile);
		}
		else
		{
			staffGroupProfiles.Insert(index, newProfile);
		}
	}

}
@{
	var groupsByWeight = new SortedDictionary<int, SortedDictionary<string,List<dynamic>>>();

	foreach (var profileContentItem in Model.Items)
	{
		int groupWeight = profileContentItem.ContentItem.StaffProfilePart.StaffGroupWeight;
		string groupName = profileContentItem.ContentItem.StaffProfilePart.StaffGroupName;
		SortedDictionary<string, List<dynamic>> groupsByName;
		List<dynamic> groupProfiles;
		if (!groupsByWeight.ContainsKey(groupWeight))
		{
			groupsByName = new SortedDictionary<string, List<dynamic>>();
			groupsByWeight.Add(groupWeight, groupsByName);
            groupProfiles = new List<dynamic>();
            groupsByName.Add(groupName,groupProfiles);
		}
		else
		{
			groupsByName = groupsByWeight[groupWeight];
			if (!groupsByName.ContainsKey(groupName))
			{
				groupProfiles = new List<dynamic>();
				groupsByName.Add(groupName, groupProfiles);
			}
			else
			{
				groupProfiles = groupsByName[groupName];
			}
		}

		AddProfileToGroupList(profileContentItem, groupProfiles);
	}

  
	var groupIndex = 0;

	foreach (var groupWeight in groupsByWeight.Keys.Reverse())
	{
		foreach (var group in groupsByWeight[groupWeight])
		{
			var profileIndex = 0;
			<div class="container staff-directory-group @(groupIndex == 0 ? " staff-directory-featured-group" : "")">
				<div class="sixteen columns">
					<h2 class="staff-directory-group-name">@group.Value[0].ContentItem.StaffProfilePart.StaffGroupName</h2>
				</div>
                <div class="clear"></div>
				@foreach (var profile in group.Value)
				{
					<div class="four columns staff-directory-profile@(profileIndex == 0 ? " staff-directory-featured-profile" : "")">
						@Display(profile)
					</div>
					if ((profileIndex+1)%4 == 0)
					{
						<div class="clear"></div>
					}
					profileIndex++;
				}
			</div>
			groupIndex++;
		}
	}
}